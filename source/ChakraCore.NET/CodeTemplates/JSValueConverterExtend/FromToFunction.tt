<#@ include file="..\Template_Header.t4" #>
<#= Header("JSValueConverter") #>
<#
    for (int i = startFrom; i <= totalItems; i++)
    {
      #>

private JavaScriptValue toJSFunction<#=genCode(i,"T{1}",true)#> (JSValueConvertContext context, Func<bool<#=genCode(i,",T{1}",false,"","{0}")#>,TResult> callback)
        {
            JavaScriptNativeFunction f = (callee, isConstructCall, arguments, argumentCount, callbackData) =>
            {
                if (argumentCount != <#=i+1#>)
                {
                    throw new InvalidOperationException("call from javascript did not pass enough parameters");
                }
                <#=genCode(i,"T{1} para{1} = FromJSValue<T{1}>(context, arguments[{1}]);",false,Environment.NewLine,"{0}")#>
                <#=            genCode(i,"arguments[{1}].AddRef();",false,Environment.NewLine,"{0}")#>

                TResult result=callback(isConstructCall<#=genCode(i,",para{1}",false,"","{0}")#>);
                <#=            genCode(i,"arguments[{1}].Release();",false,Environment.NewLine,"{0}")#>
                context.RuntimeContext.Enter();//restore context
                return ToJSValue<TResult>(context,result);;
            };
            context.Handler.Hold(f);

            return context.RuntimeContext.With<JavaScriptValue>(()=>
            {
                return JavaScriptValue.CreateFunction(f);
            }
            );
        }

        

        private Func<bool,<#=genCode(i,"T{1}",true,",","{0}")#>> fromJSFunction<#=genCode(i,"T{1}",true)#>(JSValueConvertContext context, JavaScriptValue value)
        {
            Func<bool,<#=genCode(i,"T{1}",true,",","{0}")#>> result = (bool isConstruct<#=genCode(i,",T{1} para{1}",false,"","{0}")#>) =>
            {
                <#=genCode(i,"JavaScriptValue p{1} = ToJSValue<T{1}>(context,para{1});",false,Environment.NewLine,"{0}")#>

                JavaScriptValue r=context.RuntimeContext.With<JavaScriptValue>(()=>
                {
                <#=genCode(i,"p{1}.AddRef();",false,Environment.NewLine,"{0}")#>
                JavaScriptValue resultValue;
                    if (isConstruct)
                    {
                        resultValue= value.ConstructObject(context.RuntimeContext.JSValue_Undefined<#=genCode(i,",p{1}",false,"","{0}")#>);
                    }
                    else
                    {
                        resultValue= value.CallFunction(context.JSClass<#=genCode(i,",p{1}",false,"","{0}")#>);
                    }
                <#=genCode(i,"p{1}.Release();",false,Environment.NewLine,"{0}")#>
                    return resultValue;
                });
                return FromJSValue<TResult>(context,r);
            };
            return result;
        }


<#    }#>

<#@ include file="..\Template_Footer.t4"#>