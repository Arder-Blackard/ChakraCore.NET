//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChakraCore.NET.UnitTest.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ChakraCore.NET.UnitTest.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to export 
        ///    class TestClass {
        ///        Test1(v) {
        ///            return v + v;
        ///    }
        ///}
        ///.
        /// </summary>
        internal static string BasicExport {
            get {
                return ResourceManager.GetString("BasicExport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import * as imported from &quot;BasicExport.js&quot;;
        ///var a = imported.Func1(1);
        ///var b = new imported.TestClass();
        ///var c = b.Test1(1);.
        /// </summary>
        internal static string BasicImport {
            get {
                return ResourceManager.GetString("BasicImport", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function MultiTransfer() {
        ///    var result = &quot;&quot;;
        ///    for (var i = 0; i &lt; proxies.length; i++) {
        ///        result = result  +proxies[i].GetName()+&quot;,&quot;;
        ///    }
        ///    return result;
        ///}
        ///
        ///function callBackToProxy() {
        ///    proxy.callBackToJs(function (v) {
        ///        proxy.echo(v);
        ///    });
        ///}
        ///
        ///
        ///
        ///.
        /// </summary>
        internal static string ComplexProxy {
            get {
                return ResourceManager.GetString("ComplexProxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function add(s) {
        ///    return s + s
        ///}
        ///function addcallback(s, callback) {
        ///    return s + callback(s)
        ///}.
        /// </summary>
        internal static string JSCall {
            get {
                return ResourceManager.GetString("JSCall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var callProxyResult = myStub.echo(&apos;hi&apos;);.
        /// </summary>
        internal static string JSProxy {
            get {
                return ResourceManager.GetString("JSProxy", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var b = a;.
        /// </summary>
        internal static string JSValueTest {
            get {
                return ResourceManager.GetString("JSValueTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var lib2 = require(&quot;TestLib2&quot;);
        ///var output = lib2.t2(&quot;abc&quot;);.
        /// </summary>
        internal static string NestedRequire {
            get {
                return ResourceManager.GetString("NestedRequire", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var hold = true;
        ///var result;
        ///function SimplePromise() {
        ///    return new Promise(function (resolve, reject) {
        ///        for (var i = 0; i &lt; 100000; i++) {
        ///
        ///        }
        ///        timer.setTimeout(function () {
        ///            test.echo(10);
        ///            resolve(1);
        ///        },1000);
        ///    });
        ///}
        ///
        ///
        ///
        ///function CallAsync() {
        ///
        ///    test.asyncFunction().then(function (x) {
        ///        result = x;
        ///        //test.echo(x);
        ///        hold = false;
        ///    });
        ///}
        ///
        ///
        ///function PromiseWrapper(executor) {
        ///    return new Promi [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Promise {
            get {
                return ResourceManager.GetString("Promise", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var p = require(&quot;TestLib&quot;);
        ///var output = p.t1(&quot;abc&quot;);.
        /// </summary>
        internal static string RequestTest {
            get {
                return ResourceManager.GetString("RequestTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var a = &apos;test&apos;;
        ///a;.
        /// </summary>
        internal static string RunScript {
            get {
                return ResourceManager.GetString("RunScript", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function arrayBufferAdd(a) {
        ///    let aa = new Int8Array(a);
        ///    typedArrayAdd(aa);
        ///}
        ///
        ///function typedArrayAdd(a) {
        ///    for (var i = 0; i &lt; a.byteLength; i++) {
        ///        a[i] += a[i];
        ///    }
        ///}
        ///
        ///function dataViewAdd(d) {
        ///    for (var i = 0; i &lt; d.byteLength; i++) {
        ///        d.setInt8(i,d.getInt8(i) * 2);
        ///    }
        ///}
        ///
        ///.
        /// </summary>
        internal static string SMOTest {
            get {
                return ResourceManager.GetString("SMOTest", resourceCulture);
            }
        }
    }
}
