<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>

<# int totalItems=7;
int startFrom=0;
#>
using Chakra.NET.API;
using System;
using System.Collections.Generic;
using static Chakra.NET.API.JavaScriptContext;
namespace Chakra.NET
{
public partial class JSValue
{
    <#
    for (int i = startFrom; i <= totalItems; i++)
    {
      #>
        public void CallMethod<#=genCode(i,"T{1}")#>(string name <#=genCode(i,",T{1} para{1}",false,"","{0}")#>)
        {
            RuntimeContext.ValueConverter.RegisterMethodConverter<#=genCode(i,"T{1}")#>();
            var a = ReadProperty<Action<#=genCode(i,"T{1}")#>>(name);
            a(<#=genCode(i,"para{1}",false,",","{0}")#>);
        }

        public TResult CallFunction<#=genCode(i,"T{1}",true)#>(string name <#=genCode(i,",T{1} para{1}",false,"","{0}")#>, bool isConstructCall=false)
        {
            RuntimeContext.ValueConverter.RegisterFunctionConverter<#=genCode(i,"T{1}",true)#>();
            var a = ReadProperty<Func<bool <#=genCode(i,",T{1}",false,"","{0}")#>,TResult>>(name);
            return a(isConstructCall<#=genCode(i,",para{1}",false,"","{0}")#>);
        }



        
      <#  
    }
    #>
    
}
}
<#+
private string genCode(int currentIndex,string pattern,bool genTResult=false,string joinWith=",",string outputPattern="<{0}>")
{
    StringBuilder sb=new StringBuilder();
    if (currentIndex==0 && !genTResult)
    {
        return "";
    }
    for (int i = 0; i < currentIndex; i++)
    {

        sb.AppendFormat(pattern,i,i+1); 

        sb.Append(joinWith);
    }
    if (genTResult)
    {
        sb.Append("TResult");
        sb.Append(joinWith);
    }
    if (sb.Length>1)
    {
        sb.Length-=joinWith.Length;
    }
    return string.Format(outputPattern,sb.ToString()) ;
}

#>